Core Components

    Tool Registry
        A central repository for all available tools
        Well-defined schemas for each tool's parameters and outputs
        Clear categorization of tools by function and context

    Function Calling Handler
        Integration with OpenAI's function calling API
        Delegates to appropriate tools based on AI model decisions
        Provides structured feedback about execution results

    Unified Chat Interface
        Consolidation of the two separate chat interfaces
        Context-aware rendering based on current user location (homepage vs workflow canvas)
        Consistent handling of user input and AI responses

Implementation Plan

Here's a step-by-step plan to implement this solution:
1. Create a Central Tool Registry

Create a file structure that clearly separates tool definitions from their implementations:

/server/tools/
  /registry.ts          # Central registration of all tools
  /toolTypes.ts         # Type definitions for tools
  /implementations/     # Individual tool implementations
    /agent/
      createAgent.ts    
      listAgents.ts
    /workflow/
      createWorkflow.ts
      runWorkflow.ts
    /platform/
      getConfig.ts

2. Define Clear Tool Schemas

Each tool should have:

    A unique name
    A clear description
    Well-defined parameter schema (using JSON Schema)
    Expected output format
    Error handling definitions

3. Implement the Agent Coordinator

Create a simple service that:

    Takes user input
    Sends it to the appropriate AI model with function definitions
    Handles function calls from the AI
    Executes the appropriate tools
    Returns results to the AI for formatting
    Delivers the final response to the user

4. Create a Unified Chat Interface

Consolidate the two chat interfaces into a context-aware component that:

    Determines the current context (homepage vs workflow canvas)
    Provides the appropriate tools to the agent based on context
    Maintains consistent UX across different areas of the application

Code Structure

Here's a proposed file structure for the implementation:

// server/tools/toolTypes.ts
export interface Tool {
  name: string;
  description: string;
  parameters: Record<string, unknown>; // JSON Schema
  execute: (params: any) => Promise<any>;
}

// server/tools/registry.ts
import { Tool } from './toolTypes';

class ToolRegistry {
  private tools: Map<string, Tool> = new Map();

  register(tool: Tool): void {
    this.tools.set(tool.name, tool);
  }

  getTool(name: string): Tool | undefined {
    return this.tools.get(name);
  }

  getAllTools(): Tool[] {
    return Array.from(this.tools.values());
  }

  getToolDefinitions(): any[] {
    return this.getAllTools().map(tool => ({
      name: tool.name,
      description: tool.description,
      parameters: tool.parameters
    }));
  }
}

export const toolRegistry = new ToolRegistry();

// server/tools/implementations/agent/createAgent.ts
import { toolRegistry } from '../../registry';

const createAgentTool = {
  name: 'createAgent',
  description: 'Creates a new agent in the platform',
  parameters: {
    type: 'object',
    properties: {
      name: {
        type: 'string',
        description: 'Name of the agent'
      },
      description: {
        type: 'string',
        description: 'Description of the agent'
      },
      type: {
        type: 'string',
        description: 'Type of the agent'
      }
    },
    required: ['name']
  },
  async execute(params: any): Promise<any> {
    // Implementation that calls storage.createAgent
    // Return the created agent
  }
};

// Register the tool
toolRegistry.register(createAgentTool);

Agent Implementation

The agent coordinator would use OpenAI SDK to handle function calling:

// server/services/agentCoordinator.ts
import { OpenAI } from 'openai';
import { toolRegistry } from '../tools/registry';

export class AgentCoordinator {
  private openai: OpenAI;
  
  constructor(apiKey: string) {
    this.openai = new OpenAI({ apiKey });
  }
  
  async processUserInput(input: string, context: string = 'general'): Promise<any> {
    // Get relevant tools based on context
    const tools = this.getContextualTools(context);
    
    // Create the messages array with system instructions
    const messages = [
      {
        role: 'system',
        content: `You are a helpful assistant that helps users interact with the platform. 
                 You have access to the following tools: ${tools.map(t => t.name).join(', ')}.
                 Before using a tool, make sure you understand what the user wants.
                 If you're unclear, ask for clarification.
                 After using a tool, provide a brief explanation of what you did.`
      },
      { role: 'user', content: input }
    ];
    
    // Call the OpenAI API with function calling
    const response = await this.openai.chat.completions.create({
      model: 'gpt-4',
      messages,
      tools: tools.map(tool => ({
        type: 'function',
        function: {
          name: tool.name,
          description: tool.description,
          parameters: tool.parameters
        }
      }))
    });
    
    // Handle function calling response
    if (response.choices[0]?.message?.tool_calls) {
      // Execute the called functions and add their results to the conversation
      const toolCalls = response.choices[0].message.tool_calls;
      
      // Add the assistant's message
      messages.push(response.choices[0].message);
      
      // Process each tool call
      for (const toolCall of toolCalls) {
        const toolName = toolCall.function.name;
        const toolParams = JSON.parse(toolCall.function.arguments);
        
        // Get the tool from registry
        const tool = toolRegistry.getTool(toolName);
        
        if (tool) {
          try {
            // Execute the tool
            const result = await tool.execute(toolParams);
            
            // Add the tool response to messages
            messages.push({
              role: 'tool',
              tool_call_id: toolCall.id,
              content: JSON.stringify(result)
            });
          } catch (error) {
            // Handle tool execution error
            messages.push({
              role: 'tool',
              tool_call_id: toolCall.id,
              content: JSON.stringify({ error: error.message })
            });
          }
        }
      }
      
      // Get the final response after tool execution
      const secondResponse = await this.openai.chat.completions.create({
        model: 'gpt-4',
        messages
      });
      
      return secondResponse.choices[0].message;
    }
    
    // Return the direct response if no function was called
    return response.choices[0].message;
  }
  
  private getContextualTools(context: string): any[] {
    // Return a subset of tools based on the current context
    const allTools = toolRegistry.getAllTools();
    
    // Filter tools based on context
    // This would be more sophisticated in practice
    if (context === 'workflow-canvas') {
      return allTools.filter(tool => 
        tool.name.startsWith('workflow') || 
        tool.name.startsWith('node')
      );
    }
    
    return allTools;
  }
}