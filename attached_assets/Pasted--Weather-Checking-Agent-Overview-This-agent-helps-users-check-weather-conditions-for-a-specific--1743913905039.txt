# Weather Checking Agent ## Overview This agent helps users check weather conditions for a specific location. It can provide current weather, forecasts, and related information. ## Capabilities - Check current weather conditions (temperature, humidity, wind, etc.) - Provide weather forecasts - Answer questions about weather patterns - Offer weather-related recommendations ## Sample Interactions ### Checking Current Weather **User**: What's the weather like in Boston today? **Agent**: To check the current weather in Boston, I would need to access real-time weather data. In a fully implemented system, I would connect to a weather API to provide you with: - Current temperature - Weather conditions (sunny, cloudy, rainy, etc.) - Humidity levels - Wind speed and direction - Feels-like temperature Would you like me to include any specific weather details for Boston? ### Forecast Request **User**: Will it rain in Seattle this weekend? **Agent**: To answer about rain in Seattle this weekend, I would need to: 1. Access a weather forecast API 2. Check precipitation probabilities for Saturday and Sunday 3. Review weather patterns for the Seattle area In a complete implementation, I would provide you with precipitation chances for each day of the weekend and recommended preparations if rain is expected. ### Weather Recommendations **User**: I'm going hiking tomorrow in Denver. Should I be concerned about the weather? **Agent**: For hiking recommendations in Denver, I would analyze: - Temperature forecast - Precipitation chances - Wind conditions - UV index - Any weather advisories or warnings This would help me provide appropriate guidance for your hiking plans, including what to wear and whether to consider rescheduling if severe weather is expected. ## Implementation Notes To create a functioning weather agent, you would need to: 1. Integrate with a weather API (like OpenWeatherMap, Weather.gov, or AccuWeather) 2. Implement location detection or validation 3. Create response templates for different weather conditions 4. Add logic to handle time-based queries (today, tomorrow, this weekend) 5. Include appropriate error handling for unavailable data or locations