/**
 * Claude Node Executor
 * Handles the execution logic for integrating with Anthropic's Claude API
 */
import { NodeExecutionData } from '../../lib/types/workflow';

export interface ClaudeNodeData {
  prompt?: string;
  systemPrompt?: string;
  model?: string;
  temperature?: number;
  maxTokens?: number;
  apiKey?: string;
  [key: string]: any;
}

/**
 * Execute the Claude node
 * @param nodeData - Configuration and state data for this node instance
 * @param inputs - Inputs passed to this node from connected nodes
 * @returns The execution result with Claude's response
 */
export async function execute(
  nodeData: ClaudeNodeData,
  inputs: Record<string, NodeExecutionData> = {}
): Promise<NodeExecutionData> {
  try {
    const startTime = new Date();
    
    // Get inputs from connected nodes or use values from nodeData
    const prompt = inputs.prompt?.items[0]?.json?.text || nodeData.prompt || '';
    const systemPrompt = inputs.systemPrompt?.items[0]?.json?.text || nodeData.systemPrompt || '';
    
    // Get configuration values with defaults
    const model = nodeData.model || 'claude-3-opus-20240229';
    const temperature = nodeData.temperature !== undefined ? nodeData.temperature : 0.7;
    const maxTokens = nodeData.maxTokens || 1000;
    
    // Use provided API key or get from environment
    const apiKey = nodeData.apiKey || process.env.CLAUDE_API_KEY;
    
    if (!apiKey) {
      throw new Error('No API key provided for Claude');
    }
    
    if (!prompt) {
      throw new Error('No prompt provided for Claude');
    }
    
    // Prepare the API request to Anthropic
    const messages = [
      { role: 'user', content: prompt }
    ];
    
    if (systemPrompt) {
      messages.unshift({ role: 'system', content: systemPrompt });
    }
    
    const requestBody = {
      model,
      messages,
      max_tokens: maxTokens,
      temperature
    };
    
    console.log('Calling Claude API with:', { model, temperature, maxTokens });
    
    // In a real implementation, this would call the actual Claude API
    // For now, we're simulating a response for demonstration purposes
    // const response = await fetch('https://api.anthropic.com/v1/messages', {
    //   method: 'POST',
    //   headers: {
    //     'Content-Type': 'application/json',
    //     'x-api-key': apiKey,
    //     'anthropic-version': '2023-06-01'
    //   },
    //   body: JSON.stringify(requestBody)
    // });
    
    // For demonstration, simulate a response
    const simulatedResponse = {
      content: [
        {
          type: 'text',
          text: `This is a simulated response from Claude. In a real implementation, this would be actual content generated by the Claude API based on your prompt: "${prompt}"`
        }
      ],
      model,
      usage: {
        input_tokens: prompt.length / 4, // Approximate
        output_tokens: 50, // Approximate
      }
    };
    
    const endTime = new Date();
    
    // Return successful execution result
    return {
      items: [
        {
          json: {
            response: simulatedResponse.content[0].text,
            metadata: {
              model: simulatedResponse.model,
              usage: simulatedResponse.usage,
              promptTokens: simulatedResponse.usage.input_tokens,
              completionTokens: simulatedResponse.usage.output_tokens,
              totalTokens: simulatedResponse.usage.input_tokens + simulatedResponse.usage.output_tokens
            }
          }
        }
      ],
      meta: {
        startTime,
        endTime,
        status: 'success'
      }
    };
  } catch (error: any) {
    console.error(`Error executing Claude node:`, error);
    
    // Return error result
    return {
      items: [],
      meta: {
        startTime: new Date(),
        endTime: new Date(),
        status: 'error',
        message: error.message || 'Error processing Claude request'
      }
    };
  }
}

export default { execute };